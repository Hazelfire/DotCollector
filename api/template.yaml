Parameters:
  CodeVersion:
    Type: String
    Description: Version of the source code
Resources:
  WebInterfaceBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: dot.hazelfire.org
      WebsiteConfiguration:
        IndexDocument: index.html
  Sessions:
    Type: AWS::S3::Bucket
  GetSessionsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Code:
        S3Bucket:
          !Join ["-", ["dotcollectordev", !Ref "AWS::Region", !Ref "AWS::AccountId"]]
        S3Key: "bundle/lambda.zip"
        S3ObjectVersion: !Ref "CodeVersion"
      Handler: index.get_sessions
      Role:
        Fn::GetAtt: ["LambdaExecutionRole", "Arn"]
      Environment:
        Variables:
          BucketName: !Ref "Sessions"
  PostSessionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Code:
        S3Bucket:
          !Join ["-", ["dotcollectordev", !Ref "AWS::Region", !Ref "AWS::AccountId"]]
        S3Key: "bundle/lambda.zip"
        S3ObjectVersion: !Ref "CodeVersion"
      Handler: index.post_sessions
      Role:
        Fn::GetAtt: ["LambdaExecutionRole", "Arn"]
      Environment:
        Variables:
          BucketName: !Ref "Sessions"
  PatchSessionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Code:
        S3Bucket:
          !Join ["-", ["dotcollectordev", !Ref "AWS::Region", !Ref "AWS::AccountId"]]
        S3Key: "bundle/lambda.zip"
        S3ObjectVersion: !Ref "CodeVersion"
      Handler: index.patch_session
      Role:
        Fn::GetAtt: ["LambdaExecutionRole", "Arn"]
      Environment:
        Variables:
          BucketName: !Ref "Sessions"
  DeleteSessionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Code:
        S3Bucket:
          !Join ["-", ["dotcollectordev", !Ref "AWS::Region", !Ref "AWS::AccountId"]]
        S3Key: "bundle/lambda.zip"
        S3ObjectVersion: !Ref "CodeVersion"
      Handler: index.delete_session
      Role:
        Fn::GetAtt: ["LambdaExecutionRole", "Arn"]
      Environment:
        Variables:
          BucketName: !Ref "Sessions"
  GetSessionByIdLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Code:
        S3Bucket:
          !Join ["-", ["dotcollectordev", !Ref "AWS::Region", !Ref "AWS::AccountId"]]
        S3Key: "bundle/lambda.zip"
        S3ObjectVersion: !Ref "CodeVersion"
      Handler: index.get_session_by_id
      Role:
        Fn::GetAtt: ["LambdaExecutionRole", "Arn"]
      Environment:
        Variables:
          BucketName: !Ref "Sessions"
  GetSessionByCodeLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Code:
        S3Bucket:
          !Join ["-", ["dotcollectordev", !Ref "AWS::Region", !Ref "AWS::AccountId"]]
        S3Key: "bundle/lambda.zip"
        S3ObjectVersion: !Ref "CodeVersion"
      Handler: index.get_session_by_code
      Role:
        Fn::GetAtt: ["LambdaExecutionRole", "Arn"]
      Environment:
        Variables:
          BucketName: !Ref "Sessions"
  PostFeedbackLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Code:
        S3Bucket:
          !Join ["-", ["dotcollectordev", !Ref "AWS::Region", !Ref "AWS::AccountId"]]
        S3Key: "bundle/lambda.zip"
        S3ObjectVersion: !Ref "CodeVersion"
      Handler: index.post_feedback
      Role:
        Fn::GetAtt: ["LambdaExecutionRole", "Arn"]
      Environment:
        Variables:
          BucketName: !Ref "Sessions"
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
  APIGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: 'sts:AssumeRole'
  ExecuteLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ExecuteDotColectorLambda
      Roles:
        - !Ref APIGatewayExecutionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource:
              - !GetAtt ["GetSessionsLambda", "Arn"]
              - !GetAtt ["PostSessionLambda", "Arn"]
              - !GetAtt ["GetSessionByIdLambda", "Arn"]
              - !GetAtt ["GetSessionByCodeLambda", "Arn"]
              - !GetAtt ["PostFeedbackLambda", "Arn"]
              - !GetAtt ["DeleteSessionLambda", "Arn"]
              - !GetAtt ["PatchSessionLambda", "Arn"]
  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: "2.0"
        info:
          title: DotCollector
          description: Offers collecting realtime feedback during a lecture. Creates sessions where feedback can be captured and then analysed
          version: 0.0.0

        paths:
          /sessions:
            post:
              summary: Creates a new session with the given parameters
              consumes:
                - application/json
                - application/yaml
              parameters:
                - in: body
                  name: Session creation information
                  description: Outlines the parameters that the session will have
                  required: true
                  schema:
                    $ref: '#/definitions/sessionCreationRequest'
              responses:
                '200':
                  description: Session created successfully
                  schema:
                    $ref: '#/definitions/session'
                '400':
                  description: An error has occurred. The message will outline the error, but it is likely that the body is invalid does not exist
                  schema:
                    $ref: '#/definitions/error'
              x-amazon-apigateway-integration:
                type: AWS_PROXY
                credentials: !GetAtt ["APIGatewayExecutionRole", "Arn"]
                uri:
                  !Join ["",["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt ["PostSessionLambda", "Arn"], "/invocations"]]
                responses:
                  default:
                    statusCode: '200'
                httpMethod: POST
            get:
              summary: Returns all the sessions that have been created by a specific user
              description: Returns an array with details of all the sessions that have been created by a user
              responses:
                '200':
                  description: Sessions returned successfully
                  schema:
                    type: array
                    items:
                      $ref: '#/definitions/session'
              x-amazon-apigateway-integration:
                type: AWS_PROXY
                credentials: !GetAtt ["APIGatewayExecutionRole", "Arn"]
                uri:
                  !Join ["",["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt ["GetSessionsLambda", "Arn"], "/invocations"]]
                responses:
                  default:
                    statusCode: '200'
                httpMethod: POST
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    type: Object
                    title: Empty Object
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          /sessionByAccessCode:
            get:
              summary: Gets a session given an access code
              parameters:
                - in: query
                  name: code
                  description: Access code for the wanted session
                  required: true
                  type: string
              responses:
                '200':
                  description: Session return successfully
                  schema:
                    $ref: '#/definitions/session'
                '404':
                  description: Could not find session with given code
                  schema:
                    $ref: '#/definitions/error'
              x-amazon-apigateway-integration:
                type: AWS_PROXY
                credentials: !GetAtt ["APIGatewayExecutionRole", "Arn"]
                uri:
                  !Join ["",["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt ["GetSessionByCodeLambda", "Arn"], "/invocations"]]
                responses:
                  default:
                    statusCode: '200'
                httpMethod: POST
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    type: Object
                    title: Empty Object
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          /sessions/{id}:
            get:
              summary: Gets the session details given a unique session identifier
              parameters:
                - in: path
                  name: id
                  description: The identifier for the session
                  required: true
                  type: string
              responses:
                '200':
                  description: Session returned successfully
                  schema:
                    $ref: '#/definitions/session'
                '404':
                  description: Could not find session with the given identifier
                  schema:
                    $ref: '#/definitions/error'
              x-amazon-apigateway-integration:
                type: AWS_PROXY
                credentials: !GetAtt ["APIGatewayExecutionRole", "Arn"]
                uri:
                  !Join ["",["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt ["GetSessionByIdLambda", "Arn"], "/invocations"]]
                responses:
                  default:
                    statusCode: '200'
                httpMethod: POST
            delete:
              summary: deletes the session details given a unique session identifier
              parameters:
                - in: path
                  name: id
                  description: The identifier for the session
                  required: true
                  type: string
              responses:
                '204':
                  description: Session returned successfully
                '404':
                  description: Could not find session with the given identifier
                  schema:
                    $ref: '#/definitions/error'
              x-amazon-apigateway-integration:
                type: AWS_PROXY
                credentials: !GetAtt ["APIGatewayExecutionRole", "Arn"]
                uri:
                  !Join ["",["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt ["DeleteSessionLambda", "Arn"], "/invocations"]]
                responses:
                  default:
                    statusCode: '200'
                httpMethod: POST
            patch:
              summary: patches the session details given a unique session identifier
              parameters:
                - in: path
                  name: id
                  description: The identifier for the session
                  required: true
                  type: string
              responses:
                '204':
                  description: Session patched successfully
                '404':
                  description: Could not find session with the given identifier
                  schema:
                    $ref: '#/definitions/error'
              x-amazon-apigateway-integration:
                type: AWS_PROXY
                credentials: !GetAtt ["APIGatewayExecutionRole", "Arn"]
                uri:
                  !Join ["",["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt ["PatchSessionLambda", "Arn"], "/invocations"]]
                responses:
                  default:
                    statusCode: '200'
                httpMethod: POST
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    type: Object
                    title: Empty Object
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS,PATCH'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
          /sessions/{id}/feedback:
            post:
              summary: Posts a new piece of feedback for the session
              consumes:
                - application/json
                - application/yaml
              parameters:
                - in: body
                  name: feedback
                  description: The new piece of feedback to be added to the session
                  required: true
                  schema:
                    $ref: '#/definitions/feedback'
                - in: path
                  name: id
                  description: The identifier for the session
                  required: true
                  type: string

              responses:
                '204':
                  description: Feedback posted successfully
                '404':
                  description: Could not find session with the given identifier
              x-amazon-apigateway-integration:
                type: AWS_PROXY
                credentials: !GetAtt ["APIGatewayExecutionRole", "Arn"]
                uri:
                  !Join ["",["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt ["PostFeedbackLambda", "Arn"], "/invocations"]]
                responses:
                  default:
                    statusCode: '200'
                httpMethod: POST
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    type: Object
                    title: Empty Object
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
        definitions:
          sessionCreationRequest:
            type: object
            properties:
              name:
                type: string
              user:
                type: string
            required:
              - name
              - user
          session:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              user:
                type: string
              active:
                type: boolean
              timestamp:
                type: integer
              accessCode:
                type: string
            required:
              - id
              - name
              - user
              - active
              - timestamp

          error:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
            required:
              - name
              - description
          feedback:
            type: object
            properties:
              time:
                type: integer
              question:
                type: string
              value:
                type: integer
            required:
              - time
              - question
              - value
          defaultCORSresponse:
            responses:
              default:
                headers:
                  Access-Control-Allow-Origin:
                    type: string
                  Access-Control-Allow-Credentials:
                    type: boolean
                  Access-Control-Allow-Headers:
                    type: array
                    collectionFormat: csv
                  Access-Control-Allow-Methods:
                    type: array
                    collectionFormat: csv
                  Access-Control-Max-Age:
                    type: integer
  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGateway
      StageName: "dev"
